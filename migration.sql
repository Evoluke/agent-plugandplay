-- Dados de perfil da companhia
create table public.company_profile (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  cpf_cnpj text not null,
  address text not null,
  zip_code text not null,
  city text not null,
  state text not null,
  country text not null,
  responsible_name text not null,
  phone text not null,
  language text not null,
  constraint company_profile_pkey primary key (id),
  constraint company_profile_id_key unique (id)
) TABLESPACE pg_default;

-- Cria a tabela de company
create table public.company (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  user_id uuid not null,
  company_name text null,
  company_profile_id bigint null,
  chatwoot_id text null,
  profile_complete boolean not null default false,
  constraint company_pkey primary key (id),
  constraint company_id_key unique (id),
  constraint company_user_id_key unique (user_id),
  constraint company_user_id_fkey foreign KEY (user_id) references auth.users (id) on update CASCADE on delete CASCADE,
  constraint company_profile_id_key unique (company_profile_id),
  constraint company_profile_id_fkey foreign KEY (company_profile_id) references company_profile (id)
) TABLESPACE pg_default;

-- Enum para status de pagamento
create type public.status_payment as enum ('pendente', 'pago', 'estorno');

-- Cria tabela de pagamentos
create table public.payments (
  id uuid not null default gen_random_uuid (),
  created_at timestamp with time zone not null default now(),
  company_id bigint null,
  agent_id uuid null,
  amount numeric(18, 2) not null default '0'::numeric,
  status public.status_payment not null default 'pendente'::status_payment,
  paid_in timestamp with time zone null,
  due_date timestamp with time zone not null,
  reference text not null default '-'::text,
  asaas_id text null,
  payment_link text null,
  constraint payments_pkey primary key (id),
  constraint payments_company_id_fkey foreign KEY (company_id) references company (id),
  constraint payments_agent_id_fkey foreign KEY (agent_id) references agents (id)
) TABLESPACE pg_default;


-- Enum para tipos de agente
create type public.agent_type as enum ('sdr', 'pre-qualificacao', 'suporte');

-- Tabela de agentes de IA
create table public.agents (
  id uuid not null default gen_random_uuid (),
  name text not null,
  type public.agent_type not null,
  is_active boolean not null default false,
  expiration_date timestamp with time zone null,
  created_at timestamp with time zone not null default now(),
  company_id bigint not null,
  instructions jsonb not null default '{}'::jsonb,
  constraint agents_pkey primary key (id),
  constraint agents_company_id_fkey foreign key (company_id) references company (id)
) TABLESPACE pg_default;

-- Enum para tom de voz dos agentes
create type public.voice_tone as enum ('formal', 'casual');

-- Tabela de personalidade dos agentes
create table public.agent_personality (
  id uuid not null default gen_random_uuid (),
  created_at timestamp with time zone not null default now(),
  agent_id uuid not null,
  voice_tone public.voice_tone not null,
  objective character varying(255) not null,
  limits character varying(500) not null,
  company_name text not null default ''::text,
  company_segment character varying(100) not null default ''::character varying,
  constraint agent_personality_pkey primary key (id),
  constraint agent_personality_agent_id_key unique (agent_id),
  constraint agent_personality_agent_id_fkey foreign key (agent_id) references agents (id)
) TABLESPACE pg_default;

-- Enum para regra de transferência após qualificação
create type public.qualification_transfer_rule as enum ('never', 'filled_collection_questions', 'personalized');

-- Tabela de comportamento dos agentes
create table public.agent_behavior (
  id uuid not null default gen_random_uuid (),
  created_at timestamp with time zone not null default now(),
  agent_id uuid not null,
  limitations character varying(255) not null default ''::character varying,
  default_fallback text not null,
  qualification_transfer_rule public.qualification_transfer_rule not null default 'never'::qualification_transfer_rule,
  qualification_transfer_conditions text not null default ''::text,
  constraint agent_behavior_pkey primary key (id),
  constraint agent_behavior_agent_id_key unique (agent_id),
  constraint agent_behavior_agent_id_fkey foreign key (agent_id) references agents (id)
) TABLESPACE pg_default;


-- Tabela de onboarding dos agentes
create table public.agent_onboarding (
  id uuid not null default gen_random_uuid (),
  created_at timestamp with time zone not null default now(),
  agent_id uuid not null,
  welcome_message character varying(255) not null default ''::character varying,
  pain_points character varying(255) not null default ''::character varying,
  collection jsonb not null default '[]'::jsonb,
  constraint agent_onboarding_pkey primary key (id),
  constraint agent_onboarding_agent_id_key unique (agent_id),
  constraint agent_onboarding_agent_id_fkey foreign key (agent_id) references agents (id)
) TABLESPACE pg_default;

-- Tabela de arquivos da base de conhecimento dos agentes
create table public.agent_knowledge_files (
  id uuid not null default gen_random_uuid (),
  created_at timestamp with time zone not null default now(),
  company_id bigint not null,
  agent_id uuid not null,
  name text not null,
  tokens integer not null,
  constraint agent_knowledge_files_pkey primary key (id),
  constraint agent_knowledge_files_agent_id_fkey foreign key (agent_id) references agents (id),
  constraint agent_knowledge_files_company_id_fkey foreign key (company_id) references company (id)
) TABLESPACE pg_default;


create table public.agent_specific_instructions (
  id uuid not null default gen_random_uuid(),
  created_at timestamp with time zone not null default now(),
  agent_id uuid not null,
  context text not null,
  user_says text not null,
  action character varying(255) not null,
  constraint agent_specific_instructions_pkey primary key (id),
  constraint agent_specific_instructions_agent_id_fkey foreign key (agent_id) references agents (id)
) TABLESPACE pg_default;

-- Tabela de mensagens
create table public.messages (
  id uuid not null default gen_random_uuid(),
  company_id bigint not null,
  message_date date not null,
  message_count integer not null,
  constraint messages_pkey primary key (id),
  constraint messages_company_id_fkey foreign key (company_id) references company (id)
) TABLESPACE pg_default;

-- Tabela de alertas do dashboard
create table public.dashboard_alerts (
  id uuid not null default gen_random_uuid(),
  created_at timestamp with time zone not null default now(),
  message text not null,
  start_date date not null,
  end_date date not null,
  constraint dashboard_alerts_pkey primary key (id)
) TABLESPACE pg_default;

-- Tabela de integração com Google Calendar dos agentes
create table public.agent_google_calendar (
  id uuid not null default gen_random_uuid(),
  created_at timestamp with time zone not null default now(),
  agent_id uuid not null,
  client_email text not null,
  private_key text not null,
  is_valid boolean not null default false,
  constraint agent_google_calendar_pkey primary key (id),
  constraint agent_google_calendar_agent_id_key unique (agent_id),
  constraint agent_google_calendar_agent_id_fkey foreign key (agent_id) references agents (id)
) TABLESPACE pg_default;
